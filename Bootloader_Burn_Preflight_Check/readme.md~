#Burn Preflight
***
This tool is an extension to the Arduino IDE that allows the user to pre-flight check the connections between an Arduino running arduino_as_ISP and the target ATmega before burning the bootloader.

Burning bootloaders is somewhat risky business. If the connections aren't right, the burn bootloader mechanism can fail partway through, leaving the fuses on the ATmega in an unknown state. Without a rom burner or similar device, it's impossible to recover from mis-set fuses, leaving the ATmega effectively bricked.

Burn Preflight verifies the I2C connections between the ISP Arduino and the target ATmega by reading the target ATmega's device information, including the all-important device signiture. The user can read the results in the Arduino compile/install message area and determine whether the values being read from the target ATmega look right or not.

***
##How to Install the Burn Preflight Tool. 
***
The pre-build Burn Preflight Tool was built against Arduino 1.6.5, and is known to run properly with Arduino 1.6.7. No other versions have been tested. All testing and building was done with the Arduino.CC/Genuino IDE.

If you're building Burn_Preflight, skip down to Build Instructions first, then come back here.

To install Burn_Preflight, go to your Sketchbook directory and create a directory
called "tools". (or CD into if it exists). Clone this archive into a directory called Burn_Preflight with the command 
		$git clone https://github.com/jrstrick/Bootloader_Burn_Preflight_Check.git Burn_Preflight

If you download the zip archive instead, rename the folder Bootloader_Burn_Preflight_Check_Master to Burn_Preflight, and put it in your tools directory. When correctly installed, your directory tree should look like this:

	your_sketchbook_directory/tools
	└── Burn_Preflight
		 ├── bin
		 │   └── com
		 │       └── burn_preflight
		 │           ├── Burn_Preflight.class
		 │           └── OSUtils.class
		 ├── build.xml
		 ├── build.xml~
		 ├── src
		 │   ├── Burn_Preflight.java
		 │   └── Burn_Preflight.java~
		 └── tool
			  ├── Burn_Preflight.jar
			  └── Command_Uploader.java



Could you just put the bin directory in the tools directory of sketchbook
and have it work? Probably, but I haven't tried it.

***
##Build Instructions
***
First, grab the Arduino source code from their git repository. Make sure
to install all the various tools you need to build Arduino 1.6.5 (or
higher, unless they change stuff (again.)). This tool is known to build against Arduino 1.6.5, and the pre-built tool works in 1.6.7, amazingly enough. I HAVE NOT YET BUILT THE TOOL AGAINST 1.6.7.

Make sure you can build Arduino. If you can't, you probably won't be
able to build tools for it either.

Dive into the build/shared/tools directory, and  and clone this archive
into a directory named Burn_Preflight there. If you downloaded the zip archive,
rename the directory Bootloader_Burn_Preflight_Check-master to Burn_Preflight and put it in build/shared/tools. Tool_Skeleton based tools won't build without all the 
Arduino stuff upstream.

When correctly installed, the directory tree should look like this:

	Arduino-master/build/shared/tools
	└──Burn_Preflight
		├── bin
		│   └── com
		│       └── burn_preflight
		│           └── Burn_Preflight.class
		├── build.xml
		├── build.xml~
		├── readme.md
		├── src
		│   ├── Burn_Preflight.java
		│   └── Burn_Preflight.java~
		└── tool
			 ├── Burn_Preflight.jar
			 └── Command_Uploader.java


Everything under bin /should/ be automatically generated by ant, but
it's easier this way, and the compiled jar I've included is smaller than this 
document.

